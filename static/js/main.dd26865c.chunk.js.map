{"version":3,"sources":["logo.svg","components/Card.js","components/Scroller.js","components/CardsList.js","components/SearchBox.js","components/Button.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","Card","name","Scroller","props","style","overflowY","height","children","CardsList","users","search","filteredUsers","filter","user","toLowerCase","includes","className","map","key","id","SearchBox","searchChange","type","onChange","Button","Header","App","this","onRequestRobots","searchField","onSearchChange","isPending","src","logo","alt","Component","connect","state","searchRobots","requestRobots","pending","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","dark","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dd26865c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Card = ({name}) => {\n  return (\n    <p>{name}</p>\n  );\n}\n\nexport default Card;\n","import React from 'react';\n\nconst Scroller = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', height: '300px'}}>\n        {props.children}\n    </div>\n  );\n}\n\nexport default Scroller;\n","import React from 'react';\nimport Card from './Card.js';\nimport Scroller from './Scroller.js';\n\nconst CardsList = ({users, search}) => {\n    const filteredUsers = users.filter(user => (user.name.toLowerCase().includes(search.toLowerCase())));\n  return (\n      <Scroller>\n    <div className=\"cards-list\">\n        {\n            filteredUsers.map((user) => <Card key={user.id} name={user.name} />)\n        }\n    </div>\n    </Scroller>\n  );\n}\n\nexport default CardsList;\n","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className=\"search-box\">\n    <label>\n    Search names:\n        <input type=\"text\" onChange={searchChange}></input>\n    </label>\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Button = () => {\n  return (\n    <button>Click me</button>\n  );\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nconst Header = () => {\n  return (\n    <header><Button /></header>\n  );\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport logo from '../logo.svg';\nimport './App.css';\nimport CardsList from '../components/CardsList';\nimport SearchBox from '../components/SearchBox';\nimport Header from '../components/Header';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    users: state.requestRobots.users,\n    isPending: state.requestRobots.pending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\ncomponentDidMount(){\n  this.props.onRequestRobots();\n  // fetch('https://jsonplaceholder.typicode.com/users')\n  // .then(response => response.json())\n  // .then(json => this.setState({users: json}))\n}\n\n// onSearchChange = (e) => {\n//   this.setState({search: e.target.value});\n// }\n  render() {\n    // const {users} = this.props;\n    const { searchField, onSearchChange, users, isPending } = this.props;\n  return (\n    <div className=\"App\">\n    <Header />\n      <div>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <SearchBox searchChange={onSearchChange}/>\n        <CardsList users={users} search={searchField}/>\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n } from './constants.js'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n } from './constants.js'\n\nconst initialStateSearch = {\n    searchField: '',\n    dark: false\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload})\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    users: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { users: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { users: action.payload, isPending: false})\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(<Provider store={store}>\n                    <App/>\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}